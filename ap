#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""This is the main entrypoint for the ap ActivityPub command
line client.

Functions:
    main(): Parses arguments and calls corresponding commands
"""

import argparse
import commands
import requests

# Create the top-level parser

def make_parser():

    """Create the top-level parser"""

    parser = argparse.ArgumentParser(description='ActivityPub command line client')
    subparsers = parser.add_subparsers(dest='subcommand')

    login_parser = subparsers.add_parser('login', help='Log into an ActivityPub server')
    login_parser.add_argument('id', help='Webfinger or ActivityPub ID')

    get_parser = subparsers.add_parser('get', help='Get an object by ID')
    get_parser.add_argument('id', help='id of object to get')

    inbox_parser = subparsers.add_parser('inbox', help='Get inbox')
    inbox_parser.add_argument('--offset', help='Offset to start at', default=0, type=int)
    inbox_parser.add_argument('--limit', help='Max items to get', default=10, type=int)

    outbox_parser = subparsers.add_parser('outbox', help='Get outbox')
    outbox_parser.add_argument('--offset', help='Offset to start at', default=0, type=int)
    outbox_parser.add_argument('--limit', help='Max items to get', default=10, type=int)

    followers_parser = subparsers.add_parser('followers', help='Get followers')
    followers_parser.add_argument('--offset', help='Offset to start at', default=0, type=int)
    followers_parser.add_argument('--limit', help='Max items to get', default=10, type=int)

    following_parser = subparsers.add_parser('following', help='Get following')
    following_parser.add_argument('--offset', help='Offset to start at', default=0, type=int)
    following_parser.add_argument('--limit', help='Max items to get', default=10, type=int)

    follow_parser = subparsers.add_parser('follow', help='Follow an actor')
    follow_parser.add_argument('id', help='id of actor to follow')

    pending_parser = subparsers.add_parser('pending', help='Get pending follow requests')
    pending_subparsers = pending_parser.add_subparsers(dest='subsubcommand')

    pending_followers_parser = pending_subparsers.add_parser('followers', help='Show pending incoming follow requests')
    pending_followers_parser.add_argument('--offset', help='Offset to start at', default=0, type=int)
    pending_followers_parser.add_argument('--limit', help='Max items to get', default=10, type=int)

    pending_following_parser = pending_subparsers.add_parser('following', help='Show pending outgoing follow requests')
    pending_following_parser.add_argument('--offset', help='Offset to start at', default=0, type=int)
    pending_following_parser.add_argument('--limit', help='Max items to get', default=10, type=int)

    create_parser = subparsers.add_parser('create', help='Create objects')
    subsubparsers = create_parser.add_subparsers(dest='subsubcommand')
    note_parser = subsubparsers.add_parser('note', help='Create a note')
    note_parser.add_argument('content', nargs='+', help='Content of the note')
    group = note_parser.add_mutually_exclusive_group()
    group.add_argument('--private', action='store_true', default=True, help='Whether the note is private')
    group.add_argument('--public', action='store_true', help='Whether the note is public')
    group.add_argument('--followers-only', action='store_true', help='Whether the note is followers-only')
    note_parser.add_argument('--to', type=str, nargs='+', help='Additional recipients')
    note_parser.add_argument('--cc', type=str, nargs='+', help='Additional CC recipients')

    return parser

def get_command(args):

    """Get the command corresponding to the arguments"""

    command = None
    entry = None

    map = {
        'login': commands.LoginCommand,
        'get': commands.GetCommand,
        'inbox': commands.InboxCommand,
        'outbox': commands.OutboxCommand,
        'followers': commands.FollowersCommand,
        'following': commands.FollowingCommand,
        'follow': commands.FollowCommand,
        'create': {
            'note': commands.CreateNoteCommand
        },
        'pending': {
            'followers': commands.PendingFollowersCommand,
            'following': commands.PendingFollowingCommand
        }
    }

    if args.subcommand in map:
        entry = map[args.subcommand]
        if isinstance(entry, dict):
            if args.subsubcommand in entry:
                entry = entry[args.subsubcommand]
            else:
                raise Exception('Invalid subsubcommand')
    else:
        raise Exception('Invalid subcommand')

    command = entry(args)

    return command

def main():

    """Parse arguments and call corresponding commands"""

    parser = make_parser()

    args = parser.parse_args()

    command = get_command(args)

    command.run()

if __name__ == '__main__':
    main()
